{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction flipCard(initialFlipState = true) {\n  _s();\n\n  const [isFlipped, setFlipped] = useState(initialFlipState);\n\n  const flip = () => {\n    setFlipped(isUp => !isUp);\n  };\n\n  return [isFlipped, flip];\n}\n\n_s(flipCard, \"JVubSWobK9YsRu6KXTFi02RKUjE=\");\n\nfunction useAxios(url, initialState = {}) {\n  _s2();\n\n  const [respData, setRespData] = useState(initialState);\n\n  const getData = async () => {\n    const response = await axios.get(url);\n    setRespData({ ...response.data,\n      request_id: uuid()\n    });\n  };\n\n  return [respData, getData];\n}\n\n_s2(useAxios, \"yp6CtgUAaa/jR+H5WhIOlLR8IKM=\");\n\n;\nexport { flipCard, useAxios };","map":{"version":3,"sources":["/Users/eumiejhong/Documents/Springboard Exercises/Unit 39/react-cards-pokemon/src/hooks.js"],"names":["useState","flipCard","initialFlipState","isFlipped","setFlipped","flip","isUp","useAxios","url","initialState","respData","setRespData","getData","response","axios","get","data","request_id","uuid"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,QAAT,CAAkBC,gBAAgB,GAAG,IAArC,EAA2C;AAAA;;AACvC,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BJ,QAAQ,CAACE,gBAAD,CAAxC;;AAEA,QAAMG,IAAI,GAAG,MAAM;AACfD,IAAAA,UAAU,CAACE,IAAI,IAAI,CAACA,IAAV,CAAV;AACH,GAFD;;AAGA,SAAO,CAACH,SAAD,EAAYE,IAAZ,CAAP;AACH;;GAPQJ,Q;;AAST,SAASM,QAAT,CAAkBC,GAAlB,EAAuBC,YAAY,GAAG,EAAtC,EAA0C;AAAA;;AACtC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACS,YAAD,CAAxC;;AAEA,QAAMG,OAAO,GAAG,YAAY;AACxB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAUP,GAAV,CAAvB;AACAG,IAAAA,WAAW,CAAC,EAAC,GAAGE,QAAQ,CAACG,IAAb;AAAmBC,MAAAA,UAAU,EAAEC,IAAI;AAAnC,KAAD,CAAX;AACH,GAHD;;AAIA,SAAO,CAACR,QAAD,EAAWE,OAAX,CAAP;AACH;;IARQL,Q;;AAQR;AAED,SAASN,QAAT,EAAmBM,QAAnB","sourcesContent":["import { useState } from \"react\";\n\nfunction flipCard(initialFlipState = true) {\n    const [isFlipped, setFlipped] = useState(initialFlipState);\n\n    const flip = () => {\n        setFlipped(isUp => !isUp);\n    };\n    return [isFlipped, flip];\n}\n\nfunction useAxios(url, initialState = {}) {\n    const [respData, setRespData] = useState(initialState);\n\n    const getData = async () => {\n        const response = await axios.get(url);\n        setRespData({...response.data, request_id: uuid() });\n    };\n    return [respData, getData];\n};\n\nexport { flipCard, useAxios };"]},"metadata":{},"sourceType":"module"}